{
  "_args": [
    [
      {
        "raw": "postcss-loader@^3.0.0",
        "scope": null,
        "escapedName": "postcss-loader",
        "name": "postcss-loader",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@vue\\cli-service"
    ]
  ],
  "_from": "postcss-loader@^3.0.0",
  "_hasShrinkwrap": false,
  "_id": "postcss-loader@3.0.0",
  "_location": "/postcss-loader",
  "_nodeVersion": "10.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-loader_3.0.0_1533750211137_0.19036803973820304"
  },
  "_npmUser": {
    "name": "michael-ciniawsky",
    "email": "michael.ciniawsky@gmail.com"
  },
  "_npmVersion": "6.3.0",
  "_phantomChildren": {
    "ajv": "6.12.6",
    "ajv-errors": "1.0.1",
    "ajv-keywords": "3.5.2"
  },
  "_requested": {
    "raw": "postcss-loader@^3.0.0",
    "scope": null,
    "escapedName": "postcss-loader",
    "name": "postcss-loader",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@vue/cli-service"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-3.0.0.tgz",
  "_shasum": "6b97943e47c72d845fa9e03f273773d4e8dd6c2d",
  "_shrinkwrap": null,
  "_spec": "postcss-loader@^3.0.0",
  "_where": "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@vue\\cli-service",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^1.1.0",
    "postcss": "^7.0.0",
    "postcss-load-config": "^2.0.0",
    "schema-utils": "^1.0.0"
  },
  "description": "PostCSS loader for webpack",
  "devDependencies": {
    "@webpack-utilities/test": "^1.0.0-alpha.0",
    "jest": "^23.0.0",
    "jsdoc-to-markdown": "^4.0.0",
    "postcss-import": "^11.0.0",
    "postcss-js": "^2.0.0",
    "standard": "^11.0.0",
    "standard-version": "^4.0.0",
    "sugarss": "^1.0.0",
    "webpack": "^4.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-cLWoDEY5OwHcAjDnkyRQzAXfs2jrKjXpO/HQFcc5b5u/r7aa471wdmChmwfnv7x2u840iat/wi0lQ5nbRgSkUA==",
    "shasum": "6b97943e47c72d845fa9e03f273773d4e8dd6c2d",
    "tarball": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-3.0.0.tgz",
    "fileCount": 9,
    "unpackedSize": 33844,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbayvDCRA9TVsSAnZWagAAT2UP/ja0ocZoMbUQiVsTmkFX\nVBqgIkz8Bp3fn0bPTbA3qbgB4R5jKehAPHphisWUQFAJERFAgBS9dw5ztrAo\nMjkBVvLVu2YJBcgHwICIcs8DT+aCwLoNNj7yiZxbZT2aZzqn1VM1CJXg9a9w\nFSVLhAeRJyDZSBAGmq9SN486qQr/s5z9WkgCMB4e6P+kLAdBoZfxEgHam6wb\nRsTdfCawnwW6WYKJ9jzXb5SJ93J+VD+vJt1HVrEW42NYQKP4cK15oyUH+E19\nluoWlSWGcxzNxo+gk4KBSE0NzmlCXYwbgz6Ge0EpqjTWJmADwwBiXgco1ZB2\nOGq9VxHS2JEfuAfnrC9czKjyfn6WZMMXaeNSPIIVxZ7uLM1T3R92ZmmBafHD\ngdgeEaAA1oozvMQ3b2/qrBmqm90MdlkZ2xF15fLjodHDFKuml2FCvyaosjRu\ndXDfO7lLZRWQjlJOA8ZPa2pJ9EKqeNZcv/H8w0hDI9BUL6Hx5pHrC+DUzAO6\nNOTRylBStmU5A9XKEp4pvVaA0qFa0XC9OiCemi/knJs1UEs/ysl6SeZ/lk7U\nqdonbFwl6a/LaKtRbFDjorrXuZWDJIMUIZmZyhSDdU57WAUuXcRy+VYSMM9C\n6xKmtfFT2NcLNni6eUSDqkBpTZuXRWJtD+qw+qw8ivW6PQkgFSDfsCeOda+N\nIjFB\r\n=o0jc\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6"
  },
  "files": [
    "src"
  ],
  "gitHead": "7647ac9051a17a3a6add7364828bf7bd9955b968",
  "homepage": "https://github.com/postcss/postcss-loader#readme",
  "keywords": [
    "css",
    "postcss",
    "postcss-runner",
    "webpack",
    "webpack-loader"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    }
  ],
  "name": "postcss-loader",
  "optionalDependencies": {},
  "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"180\" height=\"180\" hspace=\"10\"\n    alt=\"PostCSS Logo\"\n    src=\"https://api.postcss.org/logo.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" hspace=\"10\"\n      src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon.svg\">\n  </a>\n  <div align=\"center\">\n    <a href=\"https://evilmartians.com/?utm_source=postcss\">\n      <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n        alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\" vspace=\"10\">\n    </a>\n  </div>\n  <h1>PostCSS Loader</h1>\n  <p>Loader for <a href=\"https://webpack.js.org/\">webpack</a> to process CSS with <a href=\"https://postcss.org/\">PostCSS</a></p>\n</div>\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm i -D postcss-loader\n```\n\n<h2 align=\"center\">Usage</h2>\n\n### `Configuration`\n\n**`postcss.config.js`**\n```js\nmodule.exports = {\n  parser: 'sugarss',\n  plugins: {\n    'postcss-import': {},\n    'postcss-preset-env': {},\n    'cssnano': {}\n  }\n}\n```\n\nYou can read more about common PostCSS Config [here](https://github.com/michael-ciniawsky/postcss-load-config).\n\n### `Config Cascade`\n\nYou can use different `postcss.config.js` files in different directories.\nConfig lookup starts from `path.dirname(file)` and walks the file tree upwards until a config file is found.\n\n```\n|– components\n| |– component\n| | |– index.js\n| | |– index.png\n| | |– style.css (1)\n| | |– postcss.config.js (1)\n| |– component\n| | |– index.js\n| | |– image.png\n| | |– style.css (2)\n|\n|– postcss.config.js (1 && 2 (recommended))\n|– webpack.config.js\n|\n|– package.json\n```\n\nAfter setting up your `postcss.config.js`, add `postcss-loader` to your `webpack.config.js`. You can use it standalone or in conjunction with `css-loader` (recommended). Use it **after** `css-loader` and `style-loader`, but **before** other preprocessor loaders like e.g `sass|less|stylus-loader`, if you use any.\n\n**`webpack.config.js`**\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'postcss-loader' ]\n      }\n    ]\n  }\n}\n```\n\n> ⚠️  When `postcss-loader` is used standalone (without `css-loader`) don't use `@import` in your CSS, since this can lead to quite bloated bundles\n\n**`webpack.config.js` (recommended)**\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'postcss-loader'\n        ]\n      }\n    ]\n  }\n}\n```\n\n<h2 align=\"center\">Options</h2>\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[`exec`](#exec)|`{Boolean}`|`undefined`|Enable PostCSS Parser support in `CSS-in-JS`|\n|[`parser`](#syntaxes)|`{String\\|Object}`|`undefined`|Set PostCSS Parser|\n|[`syntax`](#syntaxes)|`{String\\|Object}`|`undefined`|Set PostCSS Syntax|\n|[`stringifier`](#syntaxes)|`{String\\|Object}`|`undefined`|Set PostCSS Stringifier|\n|[`config`](#config)|`{Object}`|`undefined`|Set `postcss.config.js` config path && `ctx`|\n|[`plugins`](#plugins)|`{Array\\|Function}`|`[]`|Set PostCSS Plugins|\n|[`sourceMap`](#sourcemap)|`{String\\|Boolean}`|`false`|Enable Source Maps|\n\n### `Exec`\n\nIf you use JS styles without the [`postcss-js`][postcss-js] parser, add the `exec` option.\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.style.js$/,\n  use: [\n    'style-loader',\n    { loader: 'css-loader', options: { importLoaders: 1 } },\n    { loader: 'postcss-loader', options: { parser: 'sugarss', exec: true } }\n  ]\n}\n```\n\n### `Config`\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[`path`](#path)|`{String}`|`undefined`|PostCSS Config Directory|\n|[`context`](#context)|`{Object}`|`undefined`|PostCSS Config Context|\n\n#### `Path`\n\nYou can manually specify the path to search for your config (`postcss.config.js`) with the `config.path` option. This is needed if you store your config  in a separate e.g `./config || ./.config` folder.\n\n> ⚠️  Otherwise it is **unnecessary** to set this option and is **not** recommended\n\n> ⚠️  Note that you **can't** use a **filename** other than the [supported config formats] (e.g `.postcssrc.js`, `postcss.config.js`), this option only allows you to manually specify the **directory** where config lookup should **start** from\n\n**`webpack.config.js`**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    config: {\n      path: 'path/to/.config/' ✅\n      path: 'path/to/.config/css.config.js' ❌\n    }\n  }\n}\n```\n\n[supported config formats]: https://github.com/michael-ciniawsky/postcss-load-config#usage\n\n#### `Context (ctx)`\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|`env`|`{String}`|`'development'`|`process.env.NODE_ENV`|\n|`file`|`{Object}`|`loader.resourcePath`|`extname`, `dirname`, `basename`|\n|`options`|`{Object}`|`{}`|Options|\n\n`postcss-loader` exposes context `ctx` to the config file, making your `postcss.config.js` dynamic, so can use it to do some real magic ✨\n\n**`postcss.config.js`**\n```js\nmodule.exports = ({ file, options, env }) => ({\n  parser: file.extname === '.sss' ? 'sugarss' : false,\n  plugins: {\n    'postcss-import': { root: file.dirname },\n    'postcss-preset-env': options['postcss-preset-env'] ? options['postcss-preset-env'] : false,\n    'cssnano': env === 'production' ? options.cssnano : false\n  }\n})\n```\n\n**`webpack.config.js`**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    config: {\n      ctx: {\n        'postcss-preset-env': {...options},\n        cssnano: {...options},\n      }\n    }\n  }\n}\n```\n\n### `Plugins`\n\n**`webpack.config.js`**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss',\n    plugins: (loader) => [\n      require('postcss-import')({ root: loader.resourcePath }),\n      require('postcss-preset-env')(),\n      require('cssnano')()\n    ]\n  }\n}\n```\n\n> ⚠️  webpack requires an identifier (`ident`) in `options` when `{Function}/require` is used (Complex Options). The `ident` can be freely named as long as it is unique. It's recommended to name it (`ident: 'postcss'`)\n\n### `Syntaxes`\n\n|Name|Type|Default|Description|\n|:--:|:--:|:-----:|:----------|\n|[`parser`](#parser)|`{String\\|Function}`|`undefined`|Custom PostCSS Parser|\n|[`syntax`](#syntax)|`{String\\|Function}`|`undefined`|Custom PostCSS Syntax|\n|[`stringifier`](#stringifier)|`{String\\|Function}`|`undefined`|Custom PostCSS Stringifier|\n\n#### `Parser`\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.sss$/,\n  use: [\n    ...,\n    { loader: 'postcss-loader', options: { parser: 'sugarss' } }\n  ]\n}\n```\n\n#### `Syntax`\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    ...,\n    { loader: 'postcss-loader', options: { syntax: 'sugarss' } }\n  ]\n}\n```\n\n#### `Stringifier`\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    ...,\n    { loader: 'postcss-loader', options: { stringifier: 'midas' } }\n  ]\n}\n```\n\n### `SourceMap`\n\nEnables source map support, `postcss-loader` will use the previous source map given by other loaders and update it accordingly, if no previous loader is applied before `postcss-loader`, the loader will generate a source map for you.\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.css/,\n  use: [\n    { loader: 'style-loader', options: { sourceMap: true } },\n    { loader: 'css-loader', options: { sourceMap: true } },\n    { loader: 'postcss-loader', options: { sourceMap: true } },\n    { loader: 'sass-loader', options: { sourceMap: true } }\n  ]\n}\n```\n\n#### `'inline'`\n\nYou can set the `sourceMap: 'inline'` option to inline the source map\nwithin the CSS directly as an annotation comment.\n\n**`webpack.config.js`**\n```js\n{\n  loader: 'postcss-loader',\n  options: {\n    sourceMap: 'inline'\n  }\n}\n```\n\n```css\n.class { color: red; }\n\n/*# sourceMappingURL=data:application/json;base64, ... */\n```\n\n<h2 align=\"center\">Examples</h2>\n\n### `Stylelint`\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    'style-loader',\n    'css-loader',\n    {\n      loader: 'postcss-loader',\n      options: {\n        ident: 'postcss',\n        plugins: [\n          require('postcss-import')(),\n          require('stylelint')(),\n          ...,\n        ]\n      }\n    }\n  ]\n}\n```\n\n### `Autoprefixing`\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    'style-loader',\n    'css-loader',\n    {\n      loader: 'postcss-loader',\n      options: {\n        ident: 'postcss',\n        plugins: [\n          require('autoprefixer')({...options}),\n          ...,\n        ]\n      }\n    }\n  ]\n}\n```\n\n> :warning: [`postcss-preset-env`](https://github.com/csstools/postcss-preset-env) includes [`autoprefixer`](https://github.com/postcss/autoprefixer), so adding it separately is not necessary if you already use the preset.\n\n### `CSS Modules`\n\nThis loader [cannot be used] with [CSS Modules] out of the box due\nto the way `css-loader` processes file imports. To make them work properly,\neither add the css-loader’s [`importLoaders`] option.\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    'style-loader',\n    { loader: 'css-loader', options: { modules: true, importLoaders: 1 } },\n    'postcss-loader'\n  ]\n}\n```\n\nor use [postcss-modules] instead of `css-loader`.\n\n[`importLoaders`]: https://github.com/webpack-contrib/css-loader#importloaders\n[cannot be used]: https://github.com/webpack/css-loader/issues/137\n[CSS Modules]: https://github.com/webpack/css-loader#css-modules\n[postcss-modules]: https://github.com/css-modules/postcss-modules\n\n### `CSS-in-JS`\n\nIf you want to process styles written in JavaScript, use the [postcss-js] parser.\n\n[postcss-js]: https://github.com/postcss/postcss-js\n\n**`webpack.config.js`**\n```js\n{\n  test: /\\.style.js$/,\n  use: [\n    'style-loader',\n    { loader: 'css-loader', options: { importLoaders: 2 } },\n    { loader: 'postcss-loader', options: { parser: 'postcss-js' } },\n    'babel-loader'\n  ]\n}\n```\n\nAs result you will be able to write styles in the following way\n\n```js\nimport colors from './styles/colors'\n\nexport default {\n    '.menu': {\n      color: colors.main,\n      height: 25,\n      '&_link': {\n      color: 'white'\n    }\n  }\n}\n```\n\n> :warning: If you are using Babel you need to do the following in order for the setup to work\n\n> 1. Add [babel-plugin-add-module-exports] to your configuration\n> 2. You need to have only one **default** export per style module\n\n[babel-plugin-add-module-exports]: https://github.com/59naga/babel-plugin-add-module-exports\n\n### [Extract CSS][ExtractPlugin]\n\n[ExtractPlugin]: https://github.com/webpack-contrib/mini-css-extract-plugin\n\n**`webpack.config.js`**\n```js\nconst devMode = process.env.NODE_ENV !== 'production'\n\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          devMode ? 'style-loader' : MiniCssExtractPlugin.loader,\n          'css-loader',\n          'postcss-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: devMode ? '[name].css' : '[name].[hash].css'\n    })\n  ]\n}\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <a href=\"https://github.com/michael-ciniawsky\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/michael-ciniawsky.png?v=3&s=150\">\n          </br>\n          Michael Ciniawsky\n        </a>\n      </td>\n      <td align=\"center\">\n        <a href=\"https://github.com/evilebottnawi\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/evilebottnawi.png?v=3&s=150\">\n          </br>\n          Alexander Krasnoyarov\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/postcss-loader.svg\n[npm-url]: https://npmjs.com/package/postcss-loader\n\n[node]: https://img.shields.io/node/v/postcss-loader.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/postcss/postcss-loader.svg\n[deps-url]: https://david-dm.org/postcss/postcss-loader\n\n[tests]: https://img.shields.io/travis/postcss/postcss-loader.svg\n[tests-url]: https://travis-ci.org/postcss/postcss-loader\n\n[cover]: https://coveralls.io/repos/github/postcss/postcss-loader/badge.svg\n[cover-url]: https://coveralls.io/github/postcss/postcss-loader\n\n[chat]: https://badges.gitter.im/postcss/postcss.svg\n[chat-url]: https://gitter.im/postcss/postcss\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-loader.git"
  },
  "scripts": {
    "clean": "rm -rf coverage test/outputs",
    "docs": "jsdoc2md src/*.js > docs/LOADER.md",
    "lint": "standard --env jest",
    "release": "standard-version",
    "test": "jest --env node --verbose --coverage"
  },
  "version": "3.0.0"
}
