{
  "_args": [
    [
      {
        "raw": "schema-utils@^2.6.5",
        "scope": null,
        "escapedName": "schema-utils",
        "name": "schema-utils",
        "rawSpec": "^2.6.5",
        "spec": ">=2.6.5 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\babel-loader"
    ]
  ],
  "_from": "schema-utils@^2.6.5",
  "_hasShrinkwrap": false,
  "_id": "schema-utils@2.7.1",
  "_location": "/schema-utils",
  "_nodeVersion": "10.15.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/schema-utils_2.7.1_1598871630144_0.02020404742410964"
  },
  "_npmUser": {
    "name": "evilebottnawi",
    "email": "sheo13666q@gmail.com"
  },
  "_npmVersion": "6.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "schema-utils@^2.6.5",
    "scope": null,
    "escapedName": "schema-utils",
    "name": "schema-utils",
    "rawSpec": "^2.6.5",
    "spec": ">=2.6.5 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@vue/cli-service/terser-webpack-plugin",
    "/babel-loader",
    "/cache-loader",
    "/css-loader",
    "/file-loader",
    "/url-loader"
  ],
  "_resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.1.tgz",
  "_shasum": "1ca4f32d1b24c590c203b8e7a50bf0ea4cd394d7",
  "_shrinkwrap": null,
  "_spec": "schema-utils@^2.6.5",
  "_where": "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\babel-loader",
  "author": {
    "name": "webpack Contrib",
    "url": "https://github.com/webpack-contrib"
  },
  "bugs": {
    "url": "https://github.com/webpack/schema-utils/issues"
  },
  "dependencies": {
    "@types/json-schema": "^7.0.5",
    "ajv": "^6.12.4",
    "ajv-keywords": "^3.5.2"
  },
  "description": "webpack Validation Utils",
  "devDependencies": {
    "@babel/cli": "^7.10.5",
    "@babel/core": "^7.11.4",
    "@babel/preset-env": "^7.11.0",
    "@commitlint/cli": "^10.0.0",
    "@commitlint/config-conventional": "^10.0.0",
    "@webpack-contrib/defaults": "^6.3.0",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^25.5.1",
    "cross-env": "^6.0.3",
    "del": "^5.1.0",
    "del-cli": "^3.0.1",
    "eslint": "^7.7.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-import": "^2.22.0",
    "husky": "^4.2.5",
    "jest": "^25.5.4",
    "lint-staged": "^10.2.13",
    "npm-run-all": "^4.1.5",
    "prettier": "^1.19.1",
    "standard-version": "^9.0.0",
    "typescript": "^4.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-SHiNtMOUGWBQJwzISiVYKu82GiV4QYGePp3odlY1tuKO7gPtphAT5R/py0fA6xtbgLL/RvtJZnU9b8s0F1q0Xg==",
    "shasum": "1ca4f32d1b24c590c203b8e7a50bf0ea4cd394d7",
    "tarball": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.1.tgz",
    "fileCount": 16,
    "unpackedSize": 77426,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfTNhOCRA9TVsSAnZWagAAXCQP/i/a65Ye+7p9Rt5B4Php\nvretgulRBWeylzj4Bpk1znyY56pb/j1A+VcBPv+aEUMfsDikqZ+/iHI8+fPs\nWjeKtaBOAgXFwe9NhtNsq6vk3BOgmq6Lp7duoqrvEtCaczR2Bqq8gTs42nRM\nV+Xx4zweiCOxUjUZRdeUny2ZWKf3nlr10FH0khWruoAHKIxgtNW5LJ07CQLg\neYZx+/TjIeMY+fP52zUgMvZsCzrM9AMxpZOhyV0Ln6HQuvmI9O9Rv0q5RY15\nt9dHU46LOxyXQ8uZvH1U/et7pgxi6LIDRLuu9g9C+Z/73KzOHYR7AtuqSk3B\nXP0v8AliOD6cU+DCwcszFgI9/GwAO3hEjONupT4ajBBZ+Z5IKvG1Ddecdin9\n0oQN2sjPHF5dS0NlptpkOyw4qZyu66MHCaF2FGVCTHu82oifms6UVB5iSPBQ\nJM/xTVI22BE6cJUVziSiJJc14NoFoXD/ipfmMMGDZAXR/3uQSzo/3i5dKVF5\n4930ySIoU1BctpwqvZpGbJp541sIcASws29nDNTKILg+mddLXRyo5mPAThNo\ny1nQxQd2PZCH7H5NYgGApfq5WYBCeWTcVJZ3eZluIVTThKsCNKXDSUIzvOnk\nIWwuqRRQiYWCEGm0zZmPG4/GhYqTFVI4hemBHiN+xMM2cZUIEwsUbFYSmH/7\nzVXx\r\n=YPzc\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 8.9.0"
  },
  "files": [
    "dist",
    "declarations"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "gitHead": "102d170506640346b8269d7e38a042b6b5b3a444",
  "homepage": "https://github.com/webpack/schema-utils",
  "keywords": [
    "webpack"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    },
    {
      "name": "evilebottnawi",
      "email": "sheo13666q@gmail.com"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "schema-utils",
  "optionalDependencies": {},
  "readme": "<div align=\"center\">\n  <a href=\"http://json-schema.org\">\n    <img width=\"160\" height=\"160\"\n      src=\"https://raw.githubusercontent.com/webpack-contrib/schema-utils/master/.github/assets/logo.png\">\n  </a>\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# schema-utils\n\nPackage for validate options in loaders and plugins.\n\n## Getting Started\n\nTo begin, you'll need to install `schema-utils`:\n\n```console\nnpm install schema-utils\n```\n\n## API\n\n**schema.json**\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"option\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n```js\nimport schema from './path/to/schema.json';\nimport validate from 'schema-utils';\n\nconst options = { option: true };\nconst configuration = { name: 'Loader Name/Plugin Name/Name' };\n\nvalidate(schema, options, configuration);\n```\n\n### `schema`\n\nType: `String`\n\nJSON schema.\n\nSimple example of schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"This is description of option.\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n### `options`\n\nType: `Object`\n\nObject with options.\n\n```js\nvalidate(\n  schema,\n  {\n    name: 123,\n  },\n  { name: 'MyPlugin' }\n);\n```\n\n### `configuration`\n\nAllow to configure validator.\n\nThere is an alternative method to configure the `name` and`baseDataPath` options via the `title` property in the schema.\nFor example:\n\n```json\n{\n  \"title\": \"My Loader options\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"This is description of option.\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\nThe last word used for the `baseDataPath` option, other words used for the `name` option.\nBased on the example above the `name` option equals `My Loader`, the `baseDataPath` option equals `options`.\n\n#### `name`\n\nType: `Object`\nDefault: `\"Object\"`\n\nAllow to setup name in validation errors.\n\n```js\nvalidate(schema, options, { name: 'MyPlugin' });\n```\n\n```shell\nInvalid configuration object. MyPlugin has been initialised using a configuration object that does not match the API schema.\n - configuration.optionName should be a integer.\n```\n\n#### `baseDataPath`\n\nType: `String`\nDefault: `\"configuration\"`\n\nAllow to setup base data path in validation errors.\n\n```js\nvalidate(schema, options, { name: 'MyPlugin', baseDataPath: 'options' });\n```\n\n```shell\nInvalid options object. MyPlugin has been initialised using an options object that does not match the API schema.\n - options.optionName should be a integer.\n```\n\n#### `postFormatter`\n\nType: `Function`\nDefault: `undefined`\n\nAllow to reformat errors.\n\n```js\nvalidate(schema, options, {\n  name: 'MyPlugin',\n  postFormatter: (formattedError, error) => {\n    if (error.keyword === 'type') {\n      return `${formattedError}\\nAdditional Information.`;\n    }\n\n    return formattedError;\n  },\n});\n```\n\n```shell\nInvalid options object. MyPlugin has been initialized using an options object that does not match the API schema.\n - options.optionName should be a integer.\n   Additional Information.\n```\n\n## Examples\n\n**schema.json**\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"test\": {\n      \"anyOf\": [\n        { \"type\": \"array\" },\n        { \"type\": \"string\" },\n        { \"instanceof\": \"RegExp\" }\n      ]\n    },\n    \"transform\": {\n      \"instanceof\": \"Function\"\n    },\n    \"sourceMap\": {\n      \"type\": \"boolean\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n### `Loader`\n\n```js\nimport { getOptions } from 'loader-utils';\nimport validateOptions from 'schema-utils';\n\nimport schema from 'path/to/schema.json';\n\nfunction loader(src, map) {\n  const options = getOptions(this) || {};\n\n  validateOptions(schema, options, {\n    name: 'Loader Name',\n    baseDataPath: 'options',\n  });\n\n  // Code...\n}\n\nexport default loader;\n```\n\n### `Plugin`\n\n```js\nimport validateOptions from 'schema-utils';\n\nimport schema from 'path/to/schema.json';\n\nclass Plugin {\n  constructor(options) {\n    validateOptions(schema, options, {\n      name: 'Plugin Name',\n      baseDataPath: 'options',\n    });\n\n    this.options = options;\n  }\n\n  apply(compiler) {\n    // Code...\n  }\n}\n\nexport default Plugin;\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/schema-utils.svg\n[npm-url]: https://npmjs.com/package/schema-utils\n[node]: https://img.shields.io/node/v/schema-utils.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack/schema-utils.svg\n[deps-url]: https://david-dm.org/webpack/schema-utils\n[tests]: https://github.com/webpack/schema-utils/workflows/schema-utils/badge.svg\n[tests-url]: https://github.com/webpack/schema-utils/actions\n[cover]: https://codecov.io/gh/webpack/schema-utils/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack/schema-utils\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.com/badge?p=schema-utils\n[size-url]: https://packagephobia.com/result?p=schema-utils\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/schema-utils.git"
  },
  "scripts": {
    "build": "npm-run-all -p \"build:**\"",
    "build:code": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "build:types": "tsc --declaration --emitDeclarationOnly --outDir declarations && prettier \"declarations/**/*.ts\" --write",
    "clean": "del-cli dist declarations",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
    "lint:types": "tsc --pretty --noEmit",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch"
  },
  "types": "declarations/index.d.ts",
  "version": "2.7.1"
}
