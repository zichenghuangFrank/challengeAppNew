{
  "_args": [
    [
      {
        "raw": "regexpp@^2.0.1",
        "scope": null,
        "escapedName": "regexpp",
        "name": "regexpp",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\eslint"
    ]
  ],
  "_from": "regexpp@^2.0.1",
  "_hasShrinkwrap": false,
  "_id": "regexpp@2.0.1",
  "_location": "/regexpp",
  "_nodeVersion": "10.11.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/regexpp_2.0.1_1538732295013_0.4707850604874946"
  },
  "_npmUser": {
    "name": "mysticatea",
    "email": "star.ctor@gmail.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "regexpp@^2.0.1",
    "scope": null,
    "escapedName": "regexpp",
    "name": "regexpp",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint"
  ],
  "_resolved": "https://registry.npmjs.org/regexpp/-/regexpp-2.0.1.tgz",
  "_shasum": "8d19d31cf632482b589049f8281f93dbcba4d07f",
  "_shrinkwrap": null,
  "_spec": "regexpp@^2.0.1",
  "_where": "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\eslint",
  "author": {
    "name": "Toru Nagashima",
    "url": "https://github.com/mysticatea"
  },
  "bugs": {
    "url": "https://github.com/mysticatea/regexpp/issues"
  },
  "dependencies": {},
  "description": "Regular expression parser for ECMAScript 2018.",
  "devDependencies": {
    "@types/eslint": "^4.16.2",
    "@types/mocha": "^5.2.2",
    "@types/node": "^10.3.3",
    "coveralls": "^3.0.1",
    "dts-bundle": "^0.7.3",
    "eslint": "^4.19.1",
    "eslint-plugin-mysticatea": "^5.0.0-beta.15",
    "mocha": "^5.2.0",
    "npm-run-all": "^4.1.3",
    "nyc": "^12.0.2",
    "rimraf": "^2.6.2",
    "rollup": "^0.60.7",
    "rollup-plugin-node-resolve": "^3.3.0",
    "rollup-plugin-sourcemaps": "^0.4.2",
    "rollup-watch": "^4.3.1",
    "ts-node": "^6.1.1",
    "typescript": "^2.9.2",
    "typescript-eslint-parser": "^16.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lv0M6+TkDVniA3aD1Eg0DVpfU/booSu7Eev3TDO/mZKHBfVjgCGTV4t4buppESEYDtkArYFOxTJWv6S5C+iaNw==",
    "shasum": "8d19d31cf632482b589049f8281f93dbcba4d07f",
    "tarball": "https://registry.npmjs.org/regexpp/-/regexpp-2.0.1.tgz",
    "fileCount": 8,
    "unpackedSize": 1254503,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbtzEHCRA9TVsSAnZWagAAJ+wP/RmHGA/KF2dK7DXUMybr\np/9RenpuMVLg5ycBV08EhE2L0Xs4DNckRWKNaWdNnV6NeMHsz9xhwHTPapdU\n7ZxVXCAnpTav3VySek6vdGsb5J5uE4sBFkTBVLKkTT70JUEbJx5kFWTkyooC\nslUjs7gHc5hPRJju8UvupNmDGGnSVMH0nCZP3XCXSeFuv5fRpHheHRFwoVD3\nMlKbcEmQGMGo5wNCiBmpleLlmP1ox7w+IVnVJYdGXBh9ctV2PF9vN0ApANNF\n6HsqZTrIWF6Cy7hRTnp+lQ9eM813hDD8aq4DALWt4eS82iTN4e4G8SiQFopn\nki2f8S6qsSd9rfP4cRTYToj0RhyxHEpvenFkveYncJrMcKKA45q/WSvMaq3c\nWX3RW8v93f3PsHF1AwaP9FRmxWX0ImnEeTcafHWlU8bR+613K7eCFjTPB9Bf\nCxObX7bTL3AGO2Yt5xMMMwepN01r25sWmJGA+7Ruwq7w0LQAZEZB2CAEayq2\nBrkC6qlWSHrnKlr5FdCoGjk48Rlh+zZ8yDhIbrr2QZjSm6/JNyGINaYvRcU5\n5hHCwRowkGPAVM9puqc57hVcStA+PO3gB17kesu1/+ToWFNWNU97log8iHib\n99KgGUmroAvaIkUkf5Hu/y6psrD9oGR4nwXUWIFprQvB13yXsvhrDnmbZTQ6\n2hqA\r\n=fkdW\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.5.0"
  },
  "files": [
    "index.*"
  ],
  "gitHead": "d68b435cbf6d37e3fa6af186965a7b6c738bf685",
  "homepage": "https://github.com/mysticatea/regexpp#readme",
  "keywords": [
    "regexp",
    "regular",
    "expression",
    "parser",
    "validator",
    "ast",
    "abstract",
    "syntax",
    "tree",
    "ecmascript",
    "es2015",
    "es2016",
    "es2017",
    "es2018",
    "annexB"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "mysticatea",
      "email": "star.ctor@gmail.com"
    }
  ],
  "name": "regexpp",
  "optionalDependencies": {},
  "readme": "# regexpp\n\n[![npm version](https://img.shields.io/npm/v/regexpp.svg)](https://www.npmjs.com/package/regexpp)\n[![Downloads/month](https://img.shields.io/npm/dm/regexpp.svg)](http://www.npmtrends.com/regexpp)\n[![Build Status](https://travis-ci.org/mysticatea/regexpp.svg?branch=master)](https://travis-ci.org/mysticatea/regexpp)\n[![Coverage Status](https://coveralls.io/repos/github/mysticatea/regexpp/badge.svg)](https://coveralls.io/github/mysticatea/regexpp)\n[![Dependency Status](https://david-dm.org/mysticatea/regexpp.svg)](https://david-dm.org/mysticatea/regexpp)\n\nThe regular expression parser for ECMAScript.\n\n## üíø Installation\n\n```bash\n$ npm install regexpp\n```\n\n- require Node.js 6.5.0 or newer.\n\n## üìñ Usage\n\n```ts\nimport {\n    AST,\n    RegExpParser,\n    RegExpValidator,\n    RegExpVisitor,\n    parseRegExpLiteral,\n    validateRegExpLiteral,\n    visitRegExpAST\n} from \"regexpp\"\n```\n\n### parseRegExpLiteral(source, options?)\n\nParse a given regular expression literal then make AST object.\n\nThis is equivalent to `new RegExpParser(options).parseLiteral(source)`.\n\n- **Parameters:**\n    - `source` (`string | RegExp`) The source code to parse.\n    - `options?` ([`RegExpParser.Options`]) The options to parse.\n- **Return:**\n    - The AST of the regular expression.\n\n### validateRegExpLiteral(source, options?)\n\nValidate a given regular expression literal.\n\nThis is equivalent to `new RegExpValidator(options).validateLiteral(source)`.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `options?` ([`RegExpValidator.Options`]) The options to validate.\n\n### visitRegExpAST(ast, handlers)\n\nVisit each node of a given AST.\n\nThis is equivalent to `new RegExpVisitor(handlers).visit(ast)`.\n\n- **Parameters:**\n    - `ast` ([`AST.Node`]) The AST to visit.\n    - `handlers` ([`RegExpVisitor.Handlers`]) The callbacks.\n\n### RegExpParser\n\n#### new RegExpParser(options?)\n\n- **Parameters:**\n    - `options?` ([`RegExpParser.Options`]) The options to parse.\n\n#### parser.parseLiteral(source, start?, end?)\n\nParse a regular expression literal.\n\n- **Parameters:**\n    - `source` (`string`) The source code to parse. E.g. `\"/abc/g\"`.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n- **Return:**\n    - The AST of the regular expression.\n\n#### parser.parsePattern(source, start?, end?, uFlag?)\n\nParse a regular expression pattern.\n\n- **Parameters:**\n    - `source` (`string`) The source code to parse. E.g. `\"abc\"`.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n    - `uFlag?` (`boolean`) The flag to enable Unicode mode.\n- **Return:**\n    - The AST of the regular expression pattern.\n\n#### parser.parseFlags(source, start?, end?)\n\nParse a regular expression flags.\n\n- **Parameters:**\n    - `source` (`string`) The source code to parse. E.g. `\"gim\"`.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n- **Return:**\n    - The AST of the regular expression flags.\n\n### RegExpValidator\n\n#### new RegExpValidator(options)\n\n- **Parameters:**\n    - `options` ([`RegExpValidator.Options`]) The options to validate.\n\n#### validator.validateLiteral(source, start, end)\n\nValidate a regular expression literal.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n\n#### validator.validatePattern(source, start, end, uFlag)\n\nValidate a regular expression pattern.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n    - `uFlag?` (`boolean`) The flag to enable Unicode mode.\n\n#### validator.validateFlags(source, start, end)\n\nValidate a regular expression flags.\n\n- **Parameters:**\n    - `source` (`string`) The source code to validate.\n    - `start?` (`number`) The start index in the source code. Default is `0`.\n    - `end?` (`number`) The end index in the source code. Default is `source.length`.\n\n### RegExpVisitor\n\n#### new RegExpVisitor(handlers)\n\n- **Parameters:**\n    - `handlers` ([`RegExpVisitor.Handlers`]) The callbacks.\n\n#### visitor.visit(ast)\n\nValidate a regular expression literal.\n\n- **Parameters:**\n    - `ast` ([`AST.Node`]) The AST to visit.\n\n## üì∞ Changelog\n\n- [GitHub Releases](https://github.com/mysticatea/regexpp/releases)\n\n## üçª Contributing\n\nWelcome contributing!\n\nPlease use GitHub's Issues/PRs.\n\n### Development Tools\n\n- `npm test` runs tests and measures coverage.\n- `npm run build` compiles TypeScript source code to `index.js`, `index.js.map`, and `index.d.ts`.\n- `npm run clean` removes the temporary files which are created by `npm test` and `npm run build`.\n- `npm run lint` runs ESLint.\n- `npm run update:test` updates test fixtures.\n- `npm run update:ids` updates `src/unicode/ids.ts`.\n- `npm run watch` runs tests with `--watch` option.\n\n[`AST.Node`]: src/ast.ts#L4\n[`RegExpParser.Options`]: src/parser.ts#L539\n[`RegExpValidator.Options`]: src/validator.ts#L127\n[`RegExpVisitor.Handlers`]: src/visitor.ts#L204\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mysticatea/regexpp.git"
  },
  "scripts": {
    "build": "run-s build:*",
    "build:dts": "dts-bundle --name regexpp --main .temp/index.d.ts --out ../index.d.ts",
    "build:rollup": "rollup -c",
    "build:tsc": "tsc --module es2015",
    "clean": "rimraf .temp index.*",
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "lint": "eslint scripts src test --ext .ts",
    "postversion": "git push && git push --tags",
    "prebuild": "npm run -s clean",
    "pretest": "run-s build lint",
    "preversion": "npm test",
    "prewatch": "npm run -s clean",
    "test": "nyc _mocha \"test/*.ts\" --reporter dot --timeout 10000",
    "update:ids": "ts-node scripts/update-unicode-ids.ts",
    "update:test": "ts-node scripts/update-fixtures.ts",
    "version": "npm run -s build",
    "watch": "_mocha \"test/*.ts\" --require ts-node/register --reporter dot --timeout 10000 --watch-extensions .ts --watch --growl"
  },
  "version": "2.0.1"
}
