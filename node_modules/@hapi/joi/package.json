{
  "_args": [
    [
      {
        "raw": "@hapi/joi@^15.0.1",
        "scope": "@hapi",
        "escapedName": "@hapi%2fjoi",
        "name": "@hapi/joi",
        "rawSpec": "^15.0.1",
        "spec": ">=15.0.1 <16.0.0",
        "type": "range"
      },
      "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@vue\\cli-shared-utils"
    ]
  ],
  "_from": "@hapi/joi@^15.0.1",
  "_hasShrinkwrap": false,
  "_id": "@hapi/joi@15.1.1",
  "_location": "/@hapi/joi",
  "_nodeVersion": "12.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/joi_15.1.1_1565914529310_0.16455331408850982"
  },
  "_npmUser": {
    "name": "hueniverse",
    "email": "eran@hammer.io"
  },
  "_npmVersion": "6.10.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@hapi/joi@^15.0.1",
    "scope": "@hapi",
    "escapedName": "@hapi%2fjoi",
    "name": "@hapi/joi",
    "rawSpec": "^15.0.1",
    "spec": ">=15.0.1 <16.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@vue/cli-shared-utils"
  ],
  "_resolved": "https://registry.npmjs.org/@hapi/joi/-/joi-15.1.1.tgz",
  "_shasum": "c675b8a71296f02833f8d6d243b34c57b8ce19d7",
  "_shrinkwrap": null,
  "_spec": "@hapi/joi@^15.0.1",
  "_where": "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@vue\\cli-shared-utils",
  "bugs": {
    "url": "https://github.com/hapijs/joi/issues"
  },
  "dependencies": {
    "@hapi/address": "2.x.x",
    "@hapi/bourne": "1.x.x",
    "@hapi/hoek": "8.x.x",
    "@hapi/topo": "3.x.x"
  },
  "deprecated": "Switch to 'npm install joi'",
  "description": "Object schema validation",
  "devDependencies": {
    "@hapi/code": "6.x.x",
    "@hapi/lab": "20.x.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-entf8ZMOK8sc+8YfeOlM8pCfg3b5+WZIKBfUaaJT8UsjAAPjartzxIYm3TIbjvA4u+u++KbcXD38k682nVHDAQ==",
    "shasum": "c675b8a71296f02833f8d6d243b34c57b8ce19d7",
    "tarball": "https://registry.npmjs.org/@hapi/joi/-/joi-15.1.1.tgz",
    "fileCount": 29,
    "unpackedSize": 193900,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdVfWiCRA9TVsSAnZWagAAoXcP/izO+qQlwy9jMYx5frq6\nyZ9aI0JdZuCvdGKdI3MjMEOCHStc0fglC5TcX6HkMdN2ycpih26K6o1Ywl7/\no2YrKTbE3kaMHo3Viufyhvn5VzJ12RaAbohJQhQTu4UMmoiGmHCFKTpQq4iA\nwP8lbCOwNHTtO4YVJ2gJh35uPFksO2Rmx8e+knn47b4RJWInVnwvbA3ZmgCD\nhTz7dv47dAv+bIrR5FxN8gzodFMHZ4si9EFx8k4kHXRwzAswqkrPr0Sphb/U\nOGrG6uBisinH/yVY6cJI3Cx5F5yK4j4pOP+Th3ySpEDoDmdYCNt5avl7uHDN\nxkX3FcuyoyMk4+RIUbHm2JwATXnYrcUTuDGgI9ZtkImIybABjya7bFKV427U\nzIEX5QzRiaiAMsGU84kwojJzoqT8VdceoA8OUz7jP2eMjtzCuullLBlfU9lm\nmUCoFhoyT4QzBO+f6fyEQbomtzr3ogP09N7QzSFDGCwxDJ7wEBGo31w1EV7f\nzKZBmA8GuHAqe14Blacc/7tSotMH44sAjfChpKfsnrJeNeOm6G+YUciu4Ke9\nAo+VBaO6X87/LK7BRBedaSXNPiqwNDfn/xLy95lLXbGWiOm/nCkrTuOYtkLB\n+gAwpksJ8WuxPWIMTV8NSKrbHEM93T7NhktCrT6E3T0rzqEEwkMyLbD9buwH\nhweM\r\n=UpFV\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "b604775fccad77836b000aec2b33cdb6de26a73a",
  "homepage": "https://github.com/hapijs/joi",
  "keywords": [
    "schema",
    "validation"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    },
    {
      "name": "marsup",
      "email": "nicolas@morel.io"
    }
  ],
  "name": "@hapi/joi",
  "optionalDependencies": {},
  "readme": "<a href=\"http://hapijs.com\"><img src=\"https://raw.githubusercontent.com/hapijs/assets/master/images/family.png\" width=\"180px\" align=\"right\" /></a>\n\n# joi\n\nObject schema description language and validator for JavaScript objects.\n\n[![Build Status](https://travis-ci.org/hapijs/joi.svg?branch=master)](https://travis-ci.org/hapijs/joi)\n\n## Introduction\n\nImagine you run facebook and you want visitors to sign up on the website with real names and not something like `l337_p@nda` in the first name field. How would you define the limitations of what can be inputted and validate it against the set rules?\n\nThis is joi, joi allows you to create *blueprints* or *schemas* for JavaScript objects (an object that stores information) to ensure *validation* of key information.\n\n# Installation\n\n```cli \n npm install --save @hapi/joi\n ```\n\n## API\nSee the detailed [API Reference](https://github.com/hapijs/joi/blob/v15.1.0/API.md).\n\n## Example\n\n```javascript\nconst Joi = require('@hapi/joi');\n\nconst schema = Joi.object().keys({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\n    access_token: [Joi.string(), Joi.number()],\n    birthyear: Joi.number().integer().min(1900).max(2013),\n    email: Joi.string().email({ minDomainSegments: 2 })\n}).with('username', 'birthyear').without('password', 'access_token');\n\n// Return result.\nconst result = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);\n// result.error === null -> valid\n\n// You can also pass a callback which will be called synchronously with the validation result.\nJoi.validate({ username: 'abc', birthyear: 1994 }, schema, function (err, value) { });  // err === null -> valid\n\n```\n\nThe above schema defines the following constraints:\n* `username`\n    * a required string\n    * must contain only alphanumeric characters\n    * at least 3 characters long but no more than 30\n    * must be accompanied by `birthyear`\n* `password`\n    * an optional string\n    * must satisfy the custom regex\n    * cannot appear together with `access_token`\n* `access_token`\n    * an optional, unconstrained string or number\n* `birthyear`\n    * an integer between 1900 and 2013\n* `email`\n    * a valid email address string\n    * must have two domain parts e.g. `example.com`\n\n## Usage\n\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\n\n```javascript\nconst schema = {\n    a: Joi.string()\n};\n```\n\nNote that **joi** schema objects are immutable which means every additional rule added (e.g. `.min(5)`) will return a\nnew schema object.\n\nSecond, the value is validated against the defined schema:\n\n```javascript\nconst {error, value} = Joi.validate({ a: 'a string' }, schema);\n\n// or\n\nJoi.validate({ a: 'a string' }, schema, function (error, value) { });\n```\n\nIf the input is valid, then the `error` will be `null`, otherwise it will be an `Error` object providing more information.\n\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\n\n```javascript\nconst schema = Joi.string().min(10);\n```\n\nIf the schema is a **joi** type, the `schema.validate(value, callback)` can be called directly on the type. When passing a non-type schema object,\nthe module converts it internally to an object() type equivalent to:\n\n```javascript\nconst schema = Joi.object().keys({\n    a: Joi.string()\n});\n```\n\nWhen validating a schema:\n\n* Values (or keys in case of objects) are optional by default.\n\n    ```javascript\n    Joi.validate(undefined, Joi.string()); // validates fine\n    ```\n\n    To disallow this behavior, you can either set the schema as `required()`, or set `presence` to `\"required\"` when passing `options`:\n\n    ```javascript\n    Joi.validate(undefined, Joi.string().required());\n    // or\n    Joi.validate(undefined, Joi.string(), /* options */ { presence: \"required\" });\n    ```\n\n* Strings are utf-8 encoded by default.\n* Rules are defined in an additive fashion and evaluated in order, first the inclusive rules, then the exclusive rules.\n\n## Browsers\n\nJoi doesn't directly support browsers, but you could use [joi-browser](https://github.com/jeffbski/joi-browser) for an ES5 build of Joi that works in browsers, or as a source of inspiration for your own builds.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/joi.git"
  },
  "scripts": {
    "test": "lab -t 100 -a @hapi/code -L",
    "test-cov-html": "lab -r html -o coverage.html -a @hapi/code"
  },
  "version": "15.1.1"
}
