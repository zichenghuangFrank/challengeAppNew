{
  "_args": [
    [
      {
        "raw": "@vue/babel-preset-app@^4.5.8",
        "scope": "@vue",
        "escapedName": "@vue%2fbabel-preset-app",
        "name": "@vue/babel-preset-app",
        "rawSpec": "^4.5.8",
        "spec": ">=4.5.8 <5.0.0",
        "type": "range"
      },
      "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@vue\\cli-plugin-babel"
    ]
  ],
  "_from": "@vue/babel-preset-app@^4.5.8",
  "_hasShrinkwrap": false,
  "_id": "@vue/babel-preset-app@4.5.8",
  "_location": "/@vue/babel-preset-app",
  "_nodeVersion": "14.13.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/babel-preset-app_4.5.8_1603104043584_0.8974388173053127"
  },
  "_npmUser": {
    "name": "soda",
    "email": "haoqunjiang+npm@gmail.com"
  },
  "_npmVersion": "lerna/3.22.1/node@v14.13.1+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@vue/babel-preset-app@^4.5.8",
    "scope": "@vue",
    "escapedName": "@vue%2fbabel-preset-app",
    "name": "@vue/babel-preset-app",
    "rawSpec": "^4.5.8",
    "spec": ">=4.5.8 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@vue/cli-plugin-babel"
  ],
  "_resolved": "https://registry.npmjs.org/@vue/babel-preset-app/-/babel-preset-app-4.5.8.tgz",
  "_shasum": "3fc5f52181db76054ecc085622f3cb066c242f6d",
  "_shrinkwrap": null,
  "_spec": "@vue/babel-preset-app@^4.5.8",
  "_where": "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@vue\\cli-plugin-babel",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vuejs/vue-cli/issues"
  },
  "dependencies": {
    "@babel/core": "^7.11.0",
    "@babel/helper-compilation-targets": "^7.9.6",
    "@babel/helper-module-imports": "^7.8.3",
    "@babel/plugin-proposal-class-properties": "^7.8.3",
    "@babel/plugin-proposal-decorators": "^7.8.3",
    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
    "@babel/plugin-syntax-jsx": "^7.8.3",
    "@babel/plugin-transform-runtime": "^7.11.0",
    "@babel/preset-env": "^7.11.0",
    "@babel/runtime": "^7.11.0",
    "@vue/babel-plugin-jsx": "^1.0.0-0",
    "@vue/babel-preset-jsx": "^1.1.2",
    "babel-plugin-dynamic-import-node": "^2.3.3",
    "core-js": "^3.6.5",
    "core-js-compat": "^3.6.5",
    "semver": "^6.1.0"
  },
  "description": "babel-preset-app for vue-cli",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-efCBo2HY8Jcs6+SyCnvWl8jGeF1Fl38reFL35AjO4SBcro0ol/qjPkeeJLjzvXUxrHAsM9DMfL/DvPa/hBmZwQ==",
    "shasum": "3fc5f52181db76054ecc085622f3cb066c242f6d",
    "tarball": "https://registry.npmjs.org/@vue/babel-preset-app/-/babel-preset-app-4.5.8.tgz",
    "fileCount": 5,
    "unpackedSize": 19218,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjW0sCRA9TVsSAnZWagAA+fgP+gIgaiRc4QTOt/tyv4zA\nU54n3xDC5bN2KGzUcr9asKxV11qPpgCGENHbFTNHSiRnNjgqCJ7jBDfJS+IN\nhHNcui8ZbGFAbmpqLqfv6yfI3iwss8DICyjGIWlf2y7IqCj1aAd85HKBc/Q8\ndFCbyru555fAYKS2zbQhamDVCqAg+PiXDbJlSJQTKcb4DBXlnTnlCkDQVyOh\noIOCNSIcOOjUcN6cZEw3kXR622fdYhZqaUEh3Ls0vBb7qTXxwVVHsKqbFiN0\nqG+nRLIEcnO2u6ubll1bgIBhpQhcgwKuF2lRtl+b0JsV8KUq24kFtNogAz7t\njIv5FzcnPQAS6Uw7oxf1QWvULJiU81xkcYB6C+CJFIhkTyo4B0KA5NcOdDyl\nd7FlMUK7l4NQM1iWC45XC9Sh5YZ4pofHti/n/+BfT5FTS1jqKNlKB24g1uQt\neWsSzZfx5V9GIphRMlHA6Fr91Ibn7qO+L0UN9LmsFX0O4ib1XBnXvskHdY+8\nMgJPsYqSVIswMyPZ/dpGRPzrGWICp+CRa9v1VEYGu0hudK3FSvm4m6xn9orM\nbjxvgIZu8ntMnwLgl6jza8ynkhnv1GMOZfJEkrELELzpAn7lqcWsqwyiFvRp\n1ABeJPSNPMp5ZMlg3BH4s79TYa48nbAZD6nRVbCvbLWRIpyqNNjc28bV+yGk\nExWc\r\n=H9K9\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "d06a1e89957e7eb2b4875f9c4dc7f0051dd2f240",
  "homepage": "https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/babel-preset-app#readme",
  "keywords": [
    "vue",
    "cli"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "soda",
      "email": "haoqunjiang+npm@gmail.com"
    },
    {
      "name": "akryum",
      "email": "guillaume.b.chau@gmail.com"
    },
    {
      "name": "yyx990803",
      "email": "yyx990803@gmail.com"
    },
    {
      "name": "nickmessing",
      "email": "dot.nick.dot.messing@gmail.com"
    }
  ],
  "name": "@vue/babel-preset-app",
  "optionalDependencies": {},
  "peerDependencies": {
    "@babel/core": "*",
    "core-js": "^3",
    "vue": "^2 || ^3.0.0-0"
  },
  "peerDependenciesMeta": {
    "core-js": {
      "optional": true
    },
    "vue": {
      "optional": true
    }
  },
  "publishConfig": {
    "access": "public"
  },
  "readme": "# @vue/babel-preset-app\n\nThis is the default Babel preset used in all Vue CLI projects. **Note: this preset is meant to be used exclusively in projects created via Vue CLI and does not consider external use cases.**\n\n## Included Features\n\n### [@babel/preset-env](https://new.babeljs.io/docs/en/next/babel-preset-env.html)\n\n`preset-env` automatically determines the transforms and polyfills to apply based on your browser target. See [Browser Compatibility](https://cli.vuejs.org/guide/browser-compatibility.html) section in docs for more details.\n\n- `modules: false`\n  - auto set to `'commonjs'` in Jest tests\n- [`useBuiltIns: 'usage'`](#usebuiltins)\n- `targets`:\n  - by default `@babel/preset-env` will use [`browserslist config sources`](https://github.com/browserslist/browserslist#queries) (browserslist key in package.json file is recommend) unless either the [`targets`](https://babeljs.io/docs/en/babel-preset-env#targets) or [`ignoreBrowserslistConfig`](https://babeljs.io/docs/en/babel-preset-env#ignorebrowserslistconfig) options are set.\n  - set to `{ node: 'current' }` when running unit tests in Node.js\n- Includes `Promise` polyfill by default so that they are usable even in non-transpiled dependencies (only for environments that need it)\n\n### Stage 3 or Below\n\nOnly the following stage 3 or below features are supported (object rest spread is supported as part of `preset-env`):\n\n- [Dynamic Import Syntax](https://github.com/tc39/proposal-dynamic-import)\n- [Proposal Class Properties](https://babeljs.io/docs/en/next/babel-plugin-proposal-class-properties.html)\n- [Proposal Decorators (legacy)](https://babeljs.io/docs/en/next/babel-plugin-proposal-decorators.html)\n\nIf you need additional stage 3 or below features, you need to install and configure it yourself.\n\n### Vue JSX support\n\n- [@babel/plugin-syntax-jsx](https://github.com/babel/babel/tree/master/packages/babel-plugin-syntax-jsx)\n- [@vue/babel-preset-jsx](https://github.com/vuejs/jsx)\n\n### [@babel/plugin-transform-runtime](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime)\n\n`transform-runtime` avoids inlining helpers in every file. This is enabled for helpers only, since polyfills are handled by `babel-preset-env`.\n\n## Options\n\n- All options from [@babel/preset-env](https://babeljs.io/docs/en/next/babel-preset-env.html) are supported, with some of them having smarter defaults.\n\n### modules\n\n- Default:\n  - `false` when building with webpack\n  - `'commonjs'` when running tests in Jest.\n\nExplicitly set `modules` option for `babel-preset-env`. See [babel-preset-env docs](https://github.com/babel/babel/tree/master/packages/babel-preset-env#modules) for more details.\n\n### targets\n\n- Default:\n  - `@vue/babel-preset-app` will use [`browserslist config sources`](https://github.com/browserslist/browserslist#queries) (browserslist key in package.json file is recommend) unless either the [`targets`](https://babeljs.io/docs/en/babel-preset-env#targets) or [`ignoreBrowserslistConfig`](https://babeljs.io/docs/en/babel-preset-env#ignorebrowserslistconfig) options are set.\n  - set to `{ node: 'current' }` when running unit tests in Node.js\n\nExplicitly set `targets` option for `babel-preset-env`. See [babel-preset-env docs](https://github.com/babel/babel/tree/master/packages/babel-preset-env#targets) for more details.\n\n### useBuiltIns\n\n- Default: `'usage'`\n- Allowed values: `'usage' | 'entry' | false`\n\nExplicitly set `useBuiltIns` option for `babel-preset-env`.\n\nThe default value is `'usage'`, which adds imports to polyfills based on the usage in transpiled code. For example, if you use `Object.assign` in your code, the corresponding polyfill will be auto-imported if your target environment does not supports it.\n\nIf you are building a library or web component instead of an app, you probably want to set this to `false` and let the consuming app be responsible for the polyfills.\n\nNote that the usage detection does not apply to your dependencies (which are excluded by `cli-plugin-babel` by default). If one of your dependencies need polyfills, you have a few options:\n\n1. **If the dependency is written in an ES version that your target environments do not support:** Add that dependency to the `transpileDependencies` option in `vue.config.js`. This would enable both syntax transforms and usage-based polyfill detection for that dependency.\n\n2. **If the dependency ships ES5 code and explicitly lists the polyfills needed:** you can pre-include the needed polyfills using the [polyfills](#polyfills) option for this preset.\n\n3. **If the dependency ships ES5 code, but uses ES6+ features without explicitly listing polyfill requirements (e.g. Vuetify):** Use `useBuiltIns: 'entry'` and then add `import '@babel/polyfill'` to your entry file. This will import **ALL** polyfills based on your `browserslist` targets so that you don't need to worry about dependency polyfills anymore, but will likely increase your final bundle size with some unused polyfills.\n\nSee [@babel/preset-env docs](https://new.babeljs.io/docs/en/next/babel-preset-env.html#usebuiltins-usage) for more details.\n\n### polyfills\n\n- Default: `['es.array.iterator', 'es.promise', 'es.object.assign', 'es.promise.finally']`\n\nA list of [core-js](https://github.com/zloirock/core-js) polyfills to pre-include when using `useBuiltIns: 'usage'`. **These polyfills are automatically excluded if they are not needed for your target environments**.\n\nUse this option when you have 3rd party dependencies that are not processed by Babel but have specific polyfill requirements (e.g. Axios and Vuex require Promise support).\n\n### jsx\n\n- Default: `true`.\n\nSet to `false` to disable JSX support. Or you can toggle [@vue/babel-preset-jsx](https://github.com/vuejs/jsx/tree/dev/packages/babel-preset-jsx) (or [@vue/babel-plugin-jsx](https://github.com/vuejs/jsx-next) for Vue 3 projects) features here.\n\n### loose\n\n- Default: `false`.\n\nSetting this to `true` will generate code that is more performant but less spec-compliant.\n\n### entryFiles\n\n- Default: `[]`\n\nMulti page repo use `entryFiles` to ensure inject polyfills to all entry file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vue-cli.git",
    "directory": "packages/@vue/babel-preset-app"
  },
  "version": "4.5.8"
}
