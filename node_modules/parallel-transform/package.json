{
  "_args": [
    [
      {
        "raw": "parallel-transform@^1.1.0",
        "scope": null,
        "escapedName": "parallel-transform",
        "name": "parallel-transform",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\mississippi"
    ]
  ],
  "_from": "parallel-transform@^1.1.0",
  "_hasShrinkwrap": false,
  "_id": "parallel-transform@1.2.0",
  "_location": "/parallel-transform",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/parallel-transform_1.2.0_1567674645884_0.45734840049735426"
  },
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "parallel-transform@^1.1.0",
    "scope": null,
    "escapedName": "parallel-transform",
    "name": "parallel-transform",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mississippi"
  ],
  "_resolved": "https://registry.npmjs.org/parallel-transform/-/parallel-transform-1.2.0.tgz",
  "_shasum": "9049ca37d6cb2182c3b1d2c720be94d14a5814fc",
  "_shrinkwrap": null,
  "_spec": "parallel-transform@^1.1.0",
  "_where": "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\mississippi",
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/parallel-transform/issues"
  },
  "dependencies": {
    "cyclist": "^1.0.1",
    "inherits": "^2.0.3",
    "readable-stream": "^2.1.5"
  },
  "description": "Transform stream that allows you to run your transforms in parallel without changing the order",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-P2vSmIu38uIlvdcU7fDkyrxj33gTUy/ABO5ZUbGowxNCopBq/OoD42bP4UmMrJoPyk4Uqf0mu3mtWBhHCZD8yg==",
    "shasum": "9049ca37d6cb2182c3b1d2c720be94d14a5814fc",
    "tarball": "https://registry.npmjs.org/parallel-transform/-/parallel-transform-1.2.0.tgz",
    "fileCount": 4,
    "unpackedSize": 5538,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdcNEWCRA9TVsSAnZWagAAKk4P+QCfs14Ci+r/mwjGFwd0\nzo6q6KXrae5487ZDG/vngyFQnXI0YaTEu8HgsKQ89P/lPZGYspslbJEg15+H\nKImp6sCRJHRBeyiAiiMqIanDTGYEgBeZjRc+d2qpmPUda/egO2vFHaZeS11J\n0EdyuDbz8sUszlruHAVk9uYXMXlR/tUZYoWw8mWo0vpoiMXLolnikOFshqqH\nMi/Gux2m9zKJ78doj9xPEUY5g/gRFuPlhl/BZZFNCHxO18MyN75Gs3IGINXp\n+kxcbCm4KHTHjvADfYG+zQxsqMgsou17bKPO1F1i6D3/JEqhwvGWmJnOckGC\nWXL8PQHVXcoNNssFMjfAIHe7IYE1fG9nM+3b5jG6LBLkYX00VwRl36M5PPAm\nKSnGuoGMytTY+0JMgvXhs9H+LD20EN4UNKtda5M4HzbYLCGv/WuWcP5H9eMI\nNVKNP/7Cf31vB3vceqzvKkwuVsafbc+OdjvCMXdzOBABpdCt9rY+QVvR7Ue3\nzhBxAB4WRdCuodEI06M+beSz7AUxaE79EpUyDi6JdCr3dAY9LpPWNe36BkMf\ncMTf0DfQfgVIez0G8MFdgzcUurisMhtiUoMQs+IIpIVq0CjWS3ESr+yHhtx1\ng97Wnb0bSbEs0qEtbGv4mJXNkxFRLkCtirYkyh0r7hr+gKTzyTAvou7D+8SA\nS1xV\r\n=qMBR\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "4548c6075d990d587fd40e7918fc467890b21dab",
  "homepage": "https://github.com/mafintosh/parallel-transform#readme",
  "keywords": [
    "transform",
    "stream",
    "parallel",
    "preserve",
    "order"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "parallel-transform",
  "optionalDependencies": {},
  "readme": "# parallel-transform\n\n[Transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform_1) for Node.js that allows you to run your transforms\nin parallel without changing the order of the output.\n\n\tnpm install parallel-transform\n\nIt is easy to use\n\n``` js\nvar transform = require('parallel-transform');\n\nvar stream = transform(10, function(data, callback) { // 10 is the parallism level\n\tsetTimeout(function() {\n\t\tcallback(null, data);\n\t}, Math.random() * 1000);\n});\n\nfor (var i = 0; i < 10; i++) {\n\tstream.write(''+i);\n}\nstream.end();\n\nstream.on('data', function(data) {\n\tconsole.log(data); // prints 0,1,2,...\n});\nstream.on('end', function() {\n\tconsole.log('stream has ended');\n});\n```\n\nIf you run the above example you'll notice that it runs in parallel\n(does not take ~1 second between each print) and that the order is preserved\n\n## Stream options\n\nAll transforms are Node 0.10 streams. Per default they are created with the options `{objectMode:true}`.\nIf you want to use your own stream options pass them as the second parameter\n\n``` js\nvar stream = transform(10, {objectMode:false}, function(data, callback) {\n\t// data is now a buffer\n\tcallback(null, data);\n});\n\nfs.createReadStream('filename').pipe(stream).pipe(process.stdout);\n```\n\n### Unordered\nPassing the option `{ordered:false}` will output the data as soon as it's processed by a transform, without waiting to respect the order.\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/parallel-transform.git"
  },
  "version": "1.2.0"
}
