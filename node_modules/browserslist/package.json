{
  "_args": [
    [
      {
        "raw": "browserslist@^4.12.0",
        "scope": null,
        "escapedName": "browserslist",
        "name": "browserslist",
        "rawSpec": "^4.12.0",
        "spec": ">=4.12.0 <5.0.0",
        "type": "range"
      },
      "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@babel\\helper-compilation-targets"
    ]
  ],
  "_from": "browserslist@^4.12.0",
  "_hasShrinkwrap": false,
  "_id": "browserslist@4.14.6",
  "_location": "/browserslist",
  "_nodeVersion": "14.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/browserslist_4.14.6_1604243538813_0.6663924074140064"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "6.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "browserslist@^4.12.0",
    "scope": null,
    "escapedName": "browserslist",
    "name": "browserslist",
    "rawSpec": "^4.12.0",
    "spec": ">=4.12.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@babel/helper-compilation-targets",
    "/@vue/cli-service",
    "/autoprefixer",
    "/caniuse-api",
    "/core-js-compat",
    "/postcss-colormin",
    "/postcss-merge-rules",
    "/postcss-minify-params",
    "/postcss-normalize-unicode",
    "/postcss-reduce-initial",
    "/stylehacks"
  ],
  "_resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.14.6.tgz",
  "_shasum": "97702a9c212e0c6b6afefad913d3a1538e348457",
  "_shrinkwrap": null,
  "_spec": "browserslist@^4.12.0",
  "_where": "C:\\Users\\ziche\\Desktop\\challenge\\node_modules\\@babel\\helper-compilation-targets",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bin": {
    "browserslist": "cli.js"
  },
  "browser": {
    "./node.js": "./browser.js",
    "path": false
  },
  "bugs": {
    "url": "https://github.com/browserslist/browserslist/issues"
  },
  "dependencies": {
    "caniuse-lite": "^1.0.30001154",
    "electron-to-chromium": "^1.3.585",
    "escalade": "^3.1.1",
    "node-releases": "^1.1.65"
  },
  "description": "Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-zeFYcUo85ENhc/zxHbiIp0LGzzTrE2Pv2JhxvS7kpUb9Q9D38kUX6Bie7pGutJ/5iF5rOxE7CepAuWD56xJ33A==",
    "shasum": "97702a9c212e0c6b6afefad913d3a1538e348457",
    "tarball": "https://registry.npmjs.org/browserslist/-/browserslist-4.14.6.tgz",
    "fileCount": 10,
    "unpackedSize": 90814,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfntBTCRA9TVsSAnZWagAAlxUP/3Wc4gWqrbN5kTbWW089\nBI8jXiVK/Qj5iSE0Xm5pRaSwM54fubXerEGLbkn8H7MMdcRPOztU1G9+zR8P\nD9uZGl7+6ZuMjeY5iSP7AGFLjmzMPh+gma6Xazj+c80PMjsbNCVm4ToR/LVW\nbYwi9mbWUvc09AoYyPaRAhJBPB5ZZQiyIaQiL0yVOA4XbM3EQvXn2us5eW6D\n/GUZPUa6YCe8YWb+kqIwh406bRKBDROJvTQFkbmHWwCcPVU7Hf0RKpaTticr\nvRWigeI5RtxHwe66NYRg1IBT5agMNzWhPcS5JBYo88Bo5U6iGW3dyslNM9hg\n2ZPz3n+MvEJ0T/NzeRheHk0n6yFsXI2KCwXEgaez/uVh/nq0W0ftOdYcoTmA\n0RpIEa88LpZfN7vtHFjtUhXdid+lXPfZgZcwCT/6/puKMm5l5aOhl+MSSn3R\nX6WK8qXi7VPo+KaAq98Q2/Bc0SHwJoKTTTvAAqYnt82hrypi6tzocZ1aXueY\ncDt45p+4tdBfuNBlcnLvqtYM8zP1WynfN7MFIz3Q0m9cdyYVNK4+mo5mZ5XT\nGuD4OSt9KTaz9m1B1QPMqLxs7J9CJTcxPF2V2hQDrvH/9qGawj+2QCdQ00JZ\nfjN9M4LFJ+1yW591eJinLSAk6pj+U/ZU/i9wZTHIiQCuu8Afd3GMAPvilDfR\nsog9\r\n=0vTW\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
  },
  "funding": {
    "type": "tidelift",
    "url": "https://tidelift.com/funding/github/npm/browserslist"
  },
  "homepage": "https://github.com/browserslist/browserslist#readme",
  "keywords": [
    "caniuse",
    "browsers",
    "target"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "browserslist",
  "optionalDependencies": {},
  "readme": "# Browserslist [![Cult Of Martians][cult-img]][cult]\n\n<img width=\"120\" height=\"120\" alt=\"Browserslist logo by Anton Lovchikov\"\n     src=\"https://browserslist.github.io/browserslist/logo.svg\" align=\"right\">\n\nThe config to share target browsers and Node.js versions between different\nfront-end tools. It is used in:\n\n* [Autoprefixer]\n* [Babel]\n* [postcss-preset-env]\n* [eslint-plugin-compat]\n* [stylelint-no-unsupported-browser-features]\n* [postcss-normalize]\n* [obsolete-webpack-plugin]\n\nAll tools will find target browsers automatically,\nwhen you add the following to `package.json`:\n\n```json\n  \"browserslist\": [\n    \"defaults\",\n    \"not IE 11\",\n    \"not IE_Mob 11\",\n    \"maintained node versions\"\n  ]\n```\n\nOr in `.browserslistrc` config:\n\n```yaml\n# Browsers that we support\n\ndefaults\nnot IE 11\nnot IE_Mob 11\nmaintained node versions\n```\n\nDevelopers set their version lists using queries like `last 2 versions`\nto be free from updating versions manually.\nBrowserslist will use [`caniuse-lite`] with [Can I Use] data for this queries.\n\nBrowserslist will take queries from tool option,\n`browserslist` config, `.browserslistrc` config,\n`browserslist` section in `package.json` or environment variables.\n\n[Browserslist Example] shows how every tool uses Browserslist.\n\n[cult-img]: https://cultofmartians.com/assets/badges/badge.svg\n[cult]: https://cultofmartians.com/done.html\n\n<a href=\"https://evilmartians.com/?utm_source=browserslist\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[stylelint-no-unsupported-browser-features]: https://github.com/ismay/stylelint-no-unsupported-browser-features\n[eslint-plugin-compat]:                      https://github.com/amilajack/eslint-plugin-compat\n[Browserslist Example]:                      https://github.com/browserslist/browserslist-example\n[postcss-preset-env]:                        https://github.com/jonathantneal/postcss-preset-env\n[postcss-normalize]:                         https://github.com/jonathantneal/postcss-normalize\n[`caniuse-lite`]:                            https://github.com/ben-eb/caniuse-lite\n[Autoprefixer]:                              https://github.com/postcss/autoprefixer\n[Can I Use]:                                 https://caniuse.com/\n[Babel]:                                     https://github.com/babel/babel/tree/master/packages/babel-preset-env\n[obsolete-webpack-plugin]:                   https://github.com/ElemeFE/obsolete-webpack-plugin\n\n## Table of Contents\n\n* [Tools](#tools)\n* [Best Practices](#best-practices)\n* [Browsers Data Updating](#browsers-data-updating)\n* [Queries](#queries)\n  * [Query Composition](#query-composition)\n  * [Full List](#full-list)\n  * [Debug](#debug)\n  * [Browsers](#browsers)\n* [Config File](#config-file)\n  * [`package.json`](#packagejson)\n  * [`.browserslistrc`](#browserslistrc)\n* [Shareable Configs](#shareable-configs)\n* [Configuring for Different Environments](#configuring-for-different-environments)\n* [Custom Usage Data](#custom-usage-data)\n* [JS API](#js-api)\n* [Environment Variables](#environment-variables)\n* [Cache](#cache)\n* [Security Contact](#security-contact)\n* [For Enterprise](#for-enterprise)\n\n## Tools\n\n* [`browserl.ist`](https://browserl.ist/) is an online tool to check\n  what browsers will be selected by some query.\n* [`browserslist-ga`] and [`browserslist-ga-export`] download your website\n  browsers statistics to use it in `> 0.5% in my stats` query.\n* [`browserslist-useragent-regexp`] compiles Browserslist query to a RegExp\n  to test browser useragent.\n* [`browserslist-useragent-ruby`] is a Ruby library to checks browser\n  by user agent string to match Browserslist.\n* [`browserslist-browserstack`] runs BrowserStack tests for all browsers\n  in Browserslist config.\n* [`browserslist-adobe-analytics`] use Adobe Analytics data to target browsers.\n* [`caniuse-api`] returns browsers which support some specific feature.\n* Run `npx browserslist` in your project directory to see project’s\n  target browsers. This CLI tool is built-in and available in any project\n  with Autoprefixer.\n\n[`browserslist-useragent-regexp`]: https://github.com/browserslist/browserslist-useragent-regexp\n[`browserslist-adobe-analytics`]:  https://github.com/xeroxinteractive/browserslist-adobe-analytics\n[`browserslist-useragent-ruby`]:   https://github.com/browserslist/browserslist-useragent-ruby\n[`browserslist-browserstack`]:     https://github.com/xeroxinteractive/browserslist-browserstack\n[`browserslist-ga-export`]:        https://github.com/browserslist/browserslist-ga-export\n[`browserslist-useragent`]:        https://github.com/pastelsky/browserslist-useragent\n[`browserslist-ga`]:               https://github.com/browserslist/browserslist-ga\n[`caniuse-api`]:                   https://github.com/Nyalab/caniuse-api\n\n\n## Best Practices\n\n* There is a `defaults` query, which gives a reasonable configuration\n  for most users:\n\n  ```json\n    \"browserslist\": [\n      \"defaults\"\n    ]\n  ```\n\n* If you want to change the default set of browsers, we recommend combining\n  `last 2 versions`, `not dead` with a usage number like `> 0.2%`. This is\n  because `last n versions` on its own does not add popular old versions, while\n  only using a percentage above `0.2%` will in the long run make popular\n  browsers even more popular. We might run into a monopoly and stagnation\n  situation, as we had with Internet Explorer 6. Please use this setting\n  with caution.\n* Select browsers directly (`last 2 Chrome versions`) only if you are making\n  a web app for a kiosk with one browser. There are a lot of browsers\n  on the market. If you are making general web app you should respect\n  browsers diversity.\n* Don’t remove browsers just because you don’t know them. Opera Mini has\n  100 million users in Africa and it is more popular in the global market\n  than Microsoft Edge. Chinese QQ Browsers has more market share than Firefox\n  and desktop Safari combined.\n\n\n## Browsers Data Updating\n\n`npx browserslist@latest --update-db` updates `caniuse-lite` version\nin your npm, yarn or pnpm lock file.\n\nYou need to do it regularly for two reasons:\n\n1. To use the latest browser’s versions and statistics in queries like\n   `last 2 versions` or `>1%`. For example, if you created your project\n   2 years ago and did not update your dependencies, `last 1 version`\n   will return 2 year old browsers.\n2. `caiuse-lite` deduplication: to synchronize version in different tools.\n\n> What is deduplication?\n\nDue to how npm architecture is setup, you may have a situation\nwhere you have multiple versions of a single dependency required.\n\nImagine you begin a project, and you add `autoprefixer` as a dependency.\nnpm looks for the latest `caniuse-lite` version (1.0.30000700) and adds it to\n`package-lock.json` under `autoprefixer` dependencies.\n\nA year later, you decide to add Babel. At this moment, we have a\nnew version of `canuse-lite` (1.0.30000900). npm took the latest version\nand added it to your lock file under `@babel/preset-env` dependencies.\n\nNow your lock file looks like this:\n\n```ocaml\nautoprefixer 7.1.4\n  browserslist 3.1.1\n    caniuse-lite 1.0.30000700\n@babel/preset-env 7.10.0\n  browserslist 4.13.0\n    caniuse-lite 1.0.30000900\n```\n\nAs you can see, we now have two versions of `caniuse-lite` installed.\n\n\n## Queries\n\nBrowserslist will use browsers and Node.js versions query\nfrom one of these sources:\n\n1. `browserslist` key in `package.json` file in current or parent directories.\n   **We recommend this way.**\n2. `.browserslistrc` config file in current or parent directories.\n3. `browserslist` config file in current or parent directories.\n4. `BROWSERSLIST` environment variable.\n5. If the above methods did not produce a valid result\n   Browserslist will use defaults:\n   `> 0.5%, last 2 versions, Firefox ESR, not dead`.\n\n\n### Query Composition\n\nAn `or` combiner can use the keyword `or` as well as `,`.\n`last 1 version or > 1%` is equal to `last 1 version, > 1%`.\n\n`and` query combinations are also supported to perform an\nintersection of all the previous queries:\n`last 1 version or chrome > 75 and > 1%` will select\n(`browser last version` or `Chrome since 76`) and `more than 1% marketshare`.\n\nThere is 3 different ways to combine queries as depicted below. First you start\nwith a single query and then we combine the queries to get our final list.\n\nObviously you can *not* start with a `not` combiner, since there is no left-hand\nside query to combine it with. The left-hand is always resolved as `and`\ncombiner even if `or` is used (this is an API implementation specificity).\n\n| Query combiner type | Illustration | Example |\n| ------------------- | :----------: | ------- |\n|`or`/`,` combiner <br> (union) | ![Union of queries](img/union.svg)  | `> .5% or last 2 versions` <br> `> .5%, last 2 versions` |\n| `and` combiner <br> (intersection) | ![intersection of queries](img/intersection.svg) | `> .5% and last 2 versions` |\n| `not` combiner <br> (relative complement) | ![Relative complement of queries](img/complement.svg) | All those three are equivalent to the first one <br> `> .5% and not last 2 versions` <br> `> .5% or not last 2 versions` <br> `> .5%, not last 2 versions` |\n\n_A quick way to test your query is to do `npx browserslist '> 0.5%, not IE 11'`\nin your terminal._\n\n### Full List\n\nYou can specify the browser and Node.js versions by queries (case insensitive):\n\n* `defaults`: Browserslist’s default browsers\n  (`> 0.5%, last 2 versions, Firefox ESR, not dead`).\n* `> 5%`: browsers versions selected by global usage statistics.\n  `>=`, `<` and `<=` work too.\n  * `> 5% in US`: uses USA usage statistics.\n    It accepts [two-letter country code].\n  * `> 5% in alt-AS`: uses Asia region usage statistics.\n    List of all region codes can be found at [`caniuse-lite/data/regions`].\n  * `> 5% in my stats`: uses [custom usage data].\n  * `> 5% in browserslist-config-mycompany stats`: uses [custom usage data]\n    from `browserslist-config-mycompany/browserslist-stats.json`.\n  * `cover 99.5%`: most popular browsers that provide coverage.\n  * `cover 99.5% in US`: same as above, with [two-letter country code].\n  * `cover 99.5% in my stats`: uses [custom usage data].\n* `dead`: browsers without official support or updates for 24 months.\n  Right now it is `IE 10`, `IE_Mob 11`, `BlackBerry 10`, `BlackBerry 7`,\n  `Samsung 4` and `OperaMobile 12.1`.\n* `last 2 versions`: the last 2 versions for *each* browser.\n  * `last 2 Chrome versions`: the last 2 versions of Chrome browser.\n  * `last 2 major versions` or `last 2 iOS major versions`:\n    all minor/patch releases of last 2 major versions.\n* `node 10` and `node 10.4`: selects latest Node.js `10.x.x`\n  or `10.4.x` release.\n  * `current node`: Node.js version used by Browserslist right now.\n  * `maintained node versions`: all Node.js versions, which are [still maintained]\n    by Node.js Foundation.\n* `iOS 7`: the iOS browser version 7 directly.\n  * `Firefox > 20`: versions of Firefox newer than 20.\n    `>=`, `<` and `<=` work too. It also works with Node.js.\n  * `ie 6-8`: selects an inclusive range of versions.\n  * `Firefox ESR`: the latest [Firefox ESR] version.\n  * `PhantomJS 2.1` and `PhantomJS 1.9`: selects Safari versions similar\n    to PhantomJS runtime.\n* `extends browserslist-config-mycompany`: take queries from\n  `browserslist-config-mycompany` npm package.\n* `supports es6-module`: browsers with support for specific features.\n  `es6-module` here is the `feat` parameter at the URL of the [Can I Use]\n  page. A list of all available features can be found at\n  [`caniuse-lite/data/features`].\n* `since 2015` or `last 2 years`: all versions released since year 2015\n  (also `since 2015-03` and `since 2015-03-10`).\n* `unreleased versions` or `unreleased Chrome versions`:\n  alpha and beta versions.\n* `not ie <= 8`: exclude browsers selected by previous queries.\n\nYou can add `not ` to any query.\n\n[`caniuse-lite/data/regions`]: https://github.com/ben-eb/caniuse-lite/tree/master/data/regions\n[`caniuse-lite/data/features`]: https://github.com/ben-eb/caniuse-lite/tree/master/data/features\n[two-letter country code]:     https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n[custom usage data]:           #custom-usage-data\n[still maintained]:            https://github.com/nodejs/Release\n[Can I Use]:                   https://caniuse.com/\n\n\n### Debug\n\nRun `npx browserslist` in project directory to see what browsers was selected\nby your queries.\n\n```sh\n$ npx browserslist\nand_chr 61\nand_ff 56\nand_qq 1.2\nand_uc 11.4\nandroid 56\nbaidu 7.12\nbb 10\nchrome 62\nedge 16\nfirefox 56\nios_saf 11\nopera 48\nsafari 11\nsamsung 5\n```\n\n\n### Browsers\n\nNames are case insensitive:\n\n* `Android` for Android WebView.\n* `Baidu` for Baidu Browser.\n* `BlackBerry` or `bb` for Blackberry browser.\n* `Chrome` for Google Chrome.\n* `ChromeAndroid` or `and_chr` for Chrome for Android\n* `Edge` for Microsoft Edge.\n* `Electron` for Electron framework. It will be converted to Chrome version.\n* `Explorer` or `ie` for Internet Explorer.\n* `ExplorerMobile` or `ie_mob` for Internet Explorer Mobile.\n* `Firefox` or `ff` for Mozilla Firefox.\n* `FirefoxAndroid` or `and_ff` for Firefox for Android.\n* `iOS` or `ios_saf` for iOS Safari.\n* `Node` for Node.js.\n* `Opera` for Opera.\n* `OperaMini` or `op_mini` for Opera Mini.\n* `OperaMobile` or `op_mob` for Opera Mobile.\n* `QQAndroid` or `and_qq` for QQ Browser for Android.\n* `Safari` for desktop Safari.\n* `Samsung` for Samsung Internet.\n* `UCAndroid` or `and_uc` for UC Browser for Android.\n* `kaios` for KaiOS Browser.\n\n\n## Config File\n\n### `package.json`\n\nIf you want to reduce config files in project root, you can specify\nbrowsers in `package.json` with `browserslist` key:\n\n```json\n{\n  \"private\": true,\n  \"dependencies\": {\n    \"autoprefixer\": \"^6.5.4\"\n  },\n  \"browserslist\": [\n    \"last 1 version\",\n    \"> 1%\",\n    \"IE 10\"\n  ]\n}\n```\n\n\n### `.browserslistrc`\n\nSeparated Browserslist config should be named `.browserslistrc`\nand have browsers queries split by a new line.\nEach line is combined with the `or` combiner. Comments starts with `#` symbol:\n\n```yaml\n# Browsers that we support\n\nlast 1 version\n> 1%\nIE 10 # sorry\n```\n\nBrowserslist will check config in every directory in `path`.\nSo, if tool process `app/styles/main.css`, you can put config to root,\n`app/` or `app/styles`.\n\nYou can specify direct path in `BROWSERSLIST_CONFIG` environment variables.\n\n\n## Shareable Configs\n\nYou can use the following query to reference an exported Browserslist config\nfrom another package:\n\n```json\n  \"browserslist\": [\n    \"extends browserslist-config-mycompany\"\n  ]\n```\n\nFor security reasons, external configuration only supports packages that have\nthe `browserslist-config-` prefix. npm scoped packages are also supported, by\nnaming or prefixing the module with `@scope/browserslist-config`, such as\n`@scope/browserslist-config` or `@scope/browserslist-config-mycompany`.\n\nIf you don’t accept Browserslist queries from users, you can disable the\nvalidation by using the or `BROWSERSLIST_DANGEROUS_EXTEND` environment variable\nor `dangerousExtend` option.\n\n```sh\nBROWSERSLIST_DANGEROUS_EXTEND=1 npx webpack\n```\n\nBecause this uses `npm`'s resolution, you can also reference specific files\nin a package:\n\n```json\n  \"browserslist\": [\n    \"extends browserslist-config-mycompany/desktop\",\n    \"extends browserslist-config-mycompany/mobile\"\n  ]\n```\n\nWhen writing a shared Browserslist package, just export an array.\n`browserslist-config-mycompany/index.js`:\n\n```js\nmodule.exports = [\n  'last 1 version',\n  '> 1%',\n  'ie 10'\n]\n```\n\nYou can also include a `browserslist-stats.json` file as part of your shareable\nconfig at the root and query it using\n`> 5% in browserslist-config-mycompany stats`. It uses the same format\nas `extends` and the `dangerousExtend` property as above.\n\nYou can export configs for different environments and select environment\nby `BROWSERSLIST_ENV` or `env` option in your tool:\n\n```js\nmodule.exports = {\n  development: [\n    'last 1 version'\n  ],\n  production: [\n    'last 1 version',\n    '> 1%',\n    'ie 10'\n  ]\n}\n```\n\n\n## Configuring for Different Environments\n\nYou can also specify different browser queries for various environments.\nBrowserslist will choose query according to `BROWSERSLIST_ENV` or `NODE_ENV`\nvariables. If none of them is declared, Browserslist will firstly look\nfor `production` queries and then use defaults.\n\nIn `package.json`:\n\n```js\n  \"browserslist\": {\n    \"production\": [\n      \"> 1%\",\n      \"ie 10\"\n    ],\n    \"modern\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\"\n    ],\n    \"ssr\": [\n      \"node 12\"\n    ]\n  }\n```\n\nIn `.browserslistrc` config:\n\n```ini\n[production]\n> 1%\nie 10\n\n[modern]\nlast 1 chrome version\nlast 1 firefox version\n\n[ssr]\nnode 12\n```\n\n\n## Custom Usage Data\n\nIf you have a website, you can query against the usage statistics of your site.\n[`browserslist-ga`] will ask access to Google Analytics and then generate\n`browserslist-stats.json`:\n\n```\nnpx browserslist-ga\n```\n\nOr you can use [`browserslist-ga-export`] to convert Google Analytics data without giving a password for Google account.\n\nYou can generate usage statistics file by any other method. File format should\nbe like:\n\n```js\n{\n  \"ie\": {\n    \"6\": 0.01,\n    \"7\": 0.4,\n    \"8\": 1.5\n  },\n  \"chrome\": {\n    …\n  },\n  …\n}\n```\n\nNote that you can query against your custom usage data while also querying\nagainst global or regional data. For example, the query\n`> 1% in my stats, > 5% in US, 10%` is permitted.\n\n[`browserslist-ga-export`]: https://github.com/browserslist/browserslist-ga-export\n[`browserslist-ga`]:        https://github.com/browserslist/browserslist-ga\n[Can I Use]:                https://caniuse.com/\n\n\n## JS API\n\n```js\nconst browserslist = require('browserslist')\n\n// Your CSS/JS build tool code\nfunction process (source, opts) {\n  const browsers = browserslist(opts.overrideBrowserslist, {\n    stats: opts.stats,\n    path:  opts.file,\n    env:   opts.env\n  })\n  // Your code to add features for selected browsers\n}\n```\n\nQueries can be a string `\"> 1%, IE 10\"`\nor an array `['> 1%', 'IE 10']`.\n\nIf a query is missing, Browserslist will look for a config file.\nYou can provide a `path` option (that can be a file) to find the config file\nrelatively to it.\n\nOptions:\n\n* `path`: file or a directory path to look for config file. Default is `.`.\n* `env`: what environment section use from config. Default is `production`.\n* `stats`: custom usage statistics data.\n* `config`: path to config if you want to set it manually.\n* `ignoreUnknownVersions`: do not throw on direct query (like `ie 12`).\n  Default is `false.`\n* `dangerousExtend`: Disable security checks for `extend` query.\n  Default is `false.`\n* `mobileToDesktop`: Use desktop browsers if Can I Use doesn’t have data\n  about this mobile version. For instance, Browserslist will return\n  `chrome 20` on `and_chr 20` query (Can I Use has only data only about\n  latest versions of mobile browsers). Default is `false`.\n\nFor non-JS environment and debug purpose you can use CLI tool:\n\n```sh\nbrowserslist \"> 1%, IE 10\"\n```\n\nYou can get total users coverage for selected browsers by JS API:\n\n```js\nbrowserslist.coverage(browserslist('> 1%'))\n//=> 81.4\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in US'), 'US')\n//=> 83.1\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in my stats'), 'my stats')\n//=> 83.1\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in my stats', { stats }), stats)\n//=> 82.2\n```\n\nOr by CLI:\n\n```sh\n$ browserslist --coverage \"> 1%\"\nThese browsers account for 81.4% of all users globally\n```\n\n```sh\n$ browserslist --coverage=US \"> 1% in US\"\nThese browsers account for 83.1% of all users in the US\n```\n\n```sh\n$ browserslist --coverage \"> 1% in my stats\"\nThese browsers account for 83.1% of all users in custom statistics\n```\n\n```sh\n$ browserslist --coverage \"> 1% in my stats\" --stats=./stats.json\nThese browsers account for 83.1% of all users in custom statistics\n```\n\n\n## Environment Variables\n\nIf a tool uses Browserslist inside, you can change the Browserslist settings\nwith [environment variables]:\n\n* `BROWSERSLIST` with browsers queries.\n\n   ```sh\n  BROWSERSLIST=\"> 5%\" npx webpack\n   ```\n\n* `BROWSERSLIST_CONFIG` with path to config file.\n\n   ```sh\n  BROWSERSLIST_CONFIG=./config/browserslist npx webpack\n   ```\n\n* `BROWSERSLIST_ENV` with environments string.\n\n   ```sh\n  BROWSERSLIST_ENV=\"development\" npx webpack\n   ```\n\n* `BROWSERSLIST_STATS` with path to the custom usage data\n  for `> 1% in my stats` query.\n\n   ```sh\n  BROWSERSLIST_STATS=./config/usage_data.json npx webpack\n   ```\n\n* `BROWSERSLIST_DISABLE_CACHE` if you want to disable config reading cache.\n\n   ```sh\n  BROWSERSLIST_DISABLE_CACHE=1 npx webpack\n   ```\n\n* `BROWSERSLIST_DANGEROUS_EXTEND` to disable security shareable config\n  name check.\n\n   ```sh\n  BROWSERSLIST_DANGEROUS_EXTEND=1 npx webpack\n   ```\n\n[environment variables]: https://en.wikipedia.org/wiki/Environment_variable\n\n\n## Cache\n\nBrowserslist caches the configuration it reads from `package.json` and\n`browserslist` files, as well as knowledge about the existence of files,\nfor the duration of the hosting process.\n\nTo clear these caches, use:\n\n```js\nbrowserslist.clearCaches()\n```\n\nTo disable the caching altogether, set the `BROWSERSLIST_DISABLE_CACHE`\nenvironment variable.\n\n\n## Security Contact\n\nTo report a security vulnerability, please use the [Tidelift security contact].\nTidelift will coordinate the fix and disclosure.\n\n[Tidelift security contact]: https://tidelift.com/security\n\n\n## For Enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `browserslist` and thousands of other packages are working\nwith Tidelift to deliver commercial support and maintenance for the open source\ndependencies you use to build your applications. Save time, reduce risk,\nand improve code health, while paying the maintainers of the exact dependencies\nyou use. [Learn more.](https://tidelift.com/subscription/pkg/npm-browserslist?utm_source=npm-browserslist&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/browserslist/browserslist.git"
  },
  "version": "4.14.6"
}
